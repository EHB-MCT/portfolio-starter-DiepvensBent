const express = require("express");
const app = express();
const bodyParser = require("body-parser")

const knex = require("knex")
const knexConfig = require("./db/knexfile.js")
const db = knex(knexConfig.development)

const {checkItemName} = require("./helpers/endpointHelpers.js");

app.use(bodyParser.json());

/** 
 * Structure item object and parameter
 *
 * @param {integer} id: Unique identifier for the item, automatically generated by database.
 * @param {string} itemName: Name of the item.
*/

/**  GET /
 *  
 * This route retrieves a list of all items in the database.
 * It returns a JSON array containing all items if succesful.
 * 
 * @param {object} req - the HTTP request object.
 * @param {object} res - the HTTP response object.
 * @returns {object} JSON response with either an array of items or an error message
 *
*/
app.get("/", async (req, res)=>{
    try {
        const results = await db.select("*").table("items");
        res.json(results);
    } catch (error) {
        res.status(500).json({ error: 'Error retrieving items from the database.' });
    }
});

/**  GET /:id
 *  
 * This route retrieves an item by its ID from the database.
 * It returns a JSON object representing the item if successful.
 * If the item is not found or the ID is invalid, appropriate error messages are included in the JSON response.
 * 
 * @param {object} req - the HTTP request object containing the id of an item.
 * @param {object} res - the HTTP response object.
 * @returns {object} JSON response with either the item or an error message.
 *
*/
app.get('/:id',async(req,res)=>{
    try {
        const id = parseInt(req.params.id);

        if(id >= 0 && Number.isInteger(id) && id < 2147483647){
            const searchedItem = await db('items').where('id',id).first();
        
            if (searchedItem) {
                res.json(searchedItem);
            } else {
                res.status(404).json({ error: 'Item not found' });
            }
        } else {
            res.status(400).json({message: "invalid id"})
        }
    } catch (error) {
        res.status(500).json({ error: 'Error fetching item by ID.' });
    }
});

/**  POST /saveItem
 *  
 * This route creates a new item in the database.
 * It expects a JSON body containing item information in the request body.
 * If successful, it returns a JSON object representing the created item.
 * If the item name is not formatted correctly or there was an error while creating the item,
 * an error message will be included in the JSON response.
 * 
 * @param {object} req - the HTTP request object.
 * @param {itemName} req.body - the HTTP request body contains the item name.
 * @param {location_uuid} req.body - the HTTP request body contains the location uuid.
 * @param {object} res - the HTTP response object.
 * @returns {object} JSON response with either the created item or an error message
 *
*/
app.post('/saveItem', async (req, res) => {
    try {
        const {itemName, location_uuid}= req.body;

        if (checkItemName(itemName)) {
            const itemId= await db('items').insert({itemName: itemName, location_uuid}).returning("*");
            res.json(itemId);
        } else {
            res.status(400).send({message: 'Item name not formatted correctly'})
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Error creating item' });
    }
});

/**  PUT /changeItem/:id
 *  
 * This route changes the name of an existing item in the database by its ID.
 * It expects a JSON body with the updated item name.
 * If successful, it returns a JSON object representing the updated item.
 * If the ID is invalid, the item is not found, or the item name is not formatted correctly, appropriate error messages are included in the JSON response.
 * 
 * @param {object} req - the HTTP request object containing the id of an.
 * @param {itemName} req.body - the HTTP request body contains the updated item name.
 * @param {id} req.params.id - the HTTP request parameters containing the item ID.
 * @param {object} res - the HTTP response object.
 * @returns {object} JSON response with either the updated item or an error message
 *
*/
app.put('/changeItem/:id', async(req,res)=>{
    try {
        const { itemName } = req.body;
        const id = parseInt(req.params.id);
        
        if(id >= 0 && Number.isInteger(id) && id < 2147483647){
            const existingItem = await db('items').select('id').where('id', id);

            if (!itemName) {
                return res.status(400).json({ error: 'itemName is required in the request body.' });
            }

            if (!existingItem || existingItem.length === 0) {
                return res.status(404).json({ error: 'Item not found.' });
            }

            if (checkItemName(itemName)) {
                await db('items').where({ id }).update({itemName});
                res.json({id: +id});  // +id to convert id to int  
            } else {
                res.status(400).send({message: 'Item name not formatted correctly'})
            }
        } else {
            res.status(400).send({message: 'Id is invalid'})
        }
    } catch(error) {
        res.status(500).json({ error: 'Error updating item.' });
    }
});

/**  DELETE /deleteItem/:id
 *  
 * This route deletes an item from the database by its ID.
 * If successful, it returns a JSON object with a message indicating the successful deletion.
 * If the ID is invalid, or the item is not found, appropriate error messages are included in the JSON response.
 * 
 * @param {object} req - the HTTP request object.
 * @param {id} req.params.id - the HTTP request parameters containing the ID of the item to be deleted.
 * @param {object} res - the HTTP response object.
 * @returns {object} JSON response with either a success message or an error message.
 *
*/
app.delete('/deleteItem/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id);

        if (id>=0 && Number.isInteger(id) && id < 2147483647) {
            const existingItem = await db('items').select('id').where('id', id);

            if (!existingItem || existingItem.length === 0) {
                return res.status(404).json({ error: 'Item not found.' });
            }

            await db('items').where({ id }).del();
            res.json({ message: 'Item deleted successfully.' });        
        } else {
            res.status(400).json({message: "invalid id"})
        }
    } catch (error) {
        res.status(500).json({ error: 'Error deleting item.' });
    }     
});

module.exports = app;